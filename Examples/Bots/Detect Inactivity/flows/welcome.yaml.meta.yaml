---
docstring: |
    ## welcome
    It's often handy to have your bot offer to help users who have been inactive for a while. They could be confused about how to interact with the bot, may not understand the purpose of the bot, or may have encountered an obstacle your testing didn't catch. In any case, you don't want to lose these users!

    The flows and components in this example bot demonstrate how you can monitor a user's (in)activity and take action, if necessary.

    ### How it works
    Your users should always begin their interaction with your bot by going through the `welcome` flow. For this reason, we're using the `start_chat` trigger. Your bot may not need to say anything to the user in this flow, but it gives us a handy place to initialize variables. In this case, we're initializing a variable called `last_seen` and setting it to the current time. We're storing it on the `user` scope so every user will have a unique `last_seen` timestamp.

    The `welcome` flow also starts a schedule flow called `activity_monitor`. The `activity_monitor` flow will run asynchronously in the background. All it does is compare the current time with `last_seen` using the `check_last_seen` component. If more than 30 minutes have passed (i.e. 1,800 seconds), it will ask the user if they're having trouble. Otherwise, it will do nothing.

    **Note**: We've set the scheduled flow's `tag` to `{{ user.id }}_activity_monitor`. This way every user will have a unique `tag`. If you ever need to stop or reset this schedule, you'll need to reference this `tag`. If we had simply set `tag` to `activity_monitor`, all users would be sharing the same `tag` making it impossible to stop the `activity_monitor` flow for just one user.

    At the top of the `main` flow, and every other flow you have, be sure to run the `update_last_seen` component. This ensures we have an up-to-date timestamp of the user's last activity.

    ### Next steps
    An improved implementation of this would use the **Webhook & API** integration. In the **Webhook & API** integration settings, subscribe to **user initiated messages**. When your webhook is hit, it should make an API call to the `/users` endpoint to update that user's `last_seen` variable. This will ensure `last_seen` refers to the user's last input, not just the time since the most recent flow began, resulting in a more accurate activity monitor.
language: yaml
tags: []
expanded: false
